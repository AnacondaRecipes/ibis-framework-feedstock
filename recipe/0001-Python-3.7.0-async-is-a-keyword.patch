diff -urN ibis-framework-0.13.0.orig/ibis/bigquery/client.py ibis-framework-0.13.0/ibis/bigquery/client.py
--- ibis-framework-0.13.0.orig/ibis/bigquery/client.py	2018-06-18 13:34:02.742073027 +0000
+++ ibis-framework-0.13.0/ibis/bigquery/client.py	2018-06-18 13:37:53.170814486 +0000
@@ -291,8 +291,8 @@
         result = comp.build_ast(expr, context)
         return result
 
-    def _execute_query(self, ddl, async=False):
-        klass = self.async_query if async else self.sync_query
+    def _execute_query(self, ddl, _async=False):
+        klass = self.async_query if _async else self.sync_query
         inst = klass(self, ddl, query_parameters=ddl.context.params)
         return inst.execute()
 
diff -urN ibis-framework-0.13.0.orig/ibis/client.py ibis-framework-0.13.0/ibis/client.py
--- ibis-framework-0.13.0.orig/ibis/client.py	2018-06-18 13:34:02.732073245 +0000
+++ ibis-framework-0.13.0/ibis/client.py	2018-06-18 13:43:11.898842013 +0000
@@ -198,7 +198,7 @@
         """
         return self._execute(query, results=results)
 
-    def execute(self, expr, params=None, limit='default', async=False,
+    def execute(self, expr, params=None, limit='default', _async=False,
                 **kwargs):
         """
         Compile and execute Ibis expression using this backend client
@@ -211,7 +211,7 @@
           For expressions yielding result yets; retrieve at most this number of
           values/rows. Overrides any limit already set on the expression.
         params : not yet implemented
-        async : boolean, default False
+        _async : boolean, default False
 
         Returns
         -------
@@ -225,10 +225,10 @@
         if len(ast.queries) > 1:
             raise NotImplementedError
         else:
-            return self._execute_query(ast.queries[0], async=async, **kwargs)
+            return self._execute_query(ast.queries[0], _async=_async, **kwargs)
 
-    def _execute_query(self, ddl, async=False, **kwargs):
-        klass = self.async_query if async else self.sync_query
+    def _execute_query(self, ddl, _async=False, **kwargs):
+        klass = self.async_query if _async else self.sync_query
         inst = klass(self, ddl, **kwargs)
         return inst.execute()
 
@@ -325,9 +325,9 @@
     return backends
 
 
-def execute(expr, limit='default', async=False, params=None, **kwargs):
+def execute(expr, limit='default', _async=False, params=None, **kwargs):
     backend, = validate_backends(list(find_backends(expr)))
-    return backend.execute(expr, limit=limit, async=async, params=params,
+    return backend.execute(expr, limit=limit, _async=_async, params=params,
                            **kwargs)
 
 
diff -urN ibis-framework-0.13.0.orig/ibis/expr/tests/mocks.py ibis-framework-0.13.0/ibis/expr/tests/mocks.py
--- ibis-framework-0.13.0.orig/ibis/expr/tests/mocks.py	2018-06-18 13:34:02.734073187 +0000
+++ ibis-framework-0.13.0/ibis/expr/tests/mocks.py	2018-06-18 13:35:49.263416307 +0000
@@ -356,8 +356,8 @@
         from ibis.impala.compiler import build_ast
         return build_ast(expr, context)
 
-    def execute(self, expr, limit=None, async=False, params=None):
-        if async:
+    def execute(self, expr, limit=None, _async=False, params=None):
+        if _async:
             raise NotImplementedError
         ast = self._build_ast_ensure_limit(expr, limit, params=params)
         for query in ast.queries:
diff -urN ibis-framework-0.13.0.orig/ibis/expr/types.py ibis-framework-0.13.0/ibis/expr/types.py
--- ibis-framework-0.13.0.orig/ibis/expr/types.py	2018-06-18 13:34:02.734073187 +0000
+++ ibis-framework-0.13.0/ibis/expr/types.py	2018-06-18 13:36:06.126469701 +0000
@@ -172,7 +172,7 @@
             return type(self)(arg, name=name)
         return factory
 
-    def execute(self, limit='default', async=False, params=None, **kwargs):
+    def execute(self, limit='default', _async=False, params=None, **kwargs):
         """
         If this expression is based on physical tables in a database backend,
         execute it against that backend.
@@ -189,7 +189,7 @@
           Result of compiling expression and executing in backend
         """
         from ibis.client import execute
-        return execute(self, limit=limit, async=async, params=params, **kwargs)
+        return execute(self, limit=limit, _async=_async, params=params, **kwargs)
 
     def compile(self, limit=None, params=None):
         """
diff -urN ibis-framework-0.13.0.orig/ibis/impala/client.py ibis-framework-0.13.0/ibis/impala/client.py
--- ibis-framework-0.13.0.orig/ibis/impala/client.py	2018-06-18 13:34:02.734073187 +0000
+++ ibis-framework-0.13.0/ibis/impala/client.py	2018-06-18 13:37:36.617762301 +0000
@@ -108,7 +108,7 @@
         elif key in self.options:
             del self.options[key]
 
-    def execute(self, query, async=False):
+    def execute(self, query, _async=False):
         if isinstance(query, DDL):
             query = query.compile()
 
@@ -116,7 +116,7 @@
         self.log(query)
 
         try:
-            cursor.execute(query, async=async)
+            cursor.execute(query, _async=_async)
         except Exception:
             cursor.release()
             self.error(
@@ -231,9 +231,9 @@
             self.con.release(self)
             self.released = True
 
-    def execute(self, stmt, async=False):
+    def execute(self, stmt, _async=False):
         self._cursor.execute_async(stmt)
-        if async:
+        if _async:
             return
         else:
             self._wait_synchronous()
@@ -388,7 +388,7 @@
         # to block, unfortunately. This threading hack works around it
         def _async_execute():
             try:
-                self._cursor = con.execute(self.compiled_ddl, async=True)
+                self._cursor = con.execute(self.compiled_ddl, _async=True)
             except Exception as e:
                 self._exception = e
             self._execute_complete = True
@@ -1406,7 +1406,7 @@
         return len(self.list_udas(database=database, like=name)) > 0
 
     def compute_stats(self, name, database=None, incremental=False,
-                      async=False):
+                      _async=False):
         """
         Issue COMPUTE STATS command for a given table
 
@@ -1419,7 +1419,7 @@
           If True, issue COMPUTE INCREMENTAL STATS
         """
         # TODO async + cancellation
-        if async:
+        if _async:
             raise NotImplementedError
 
         maybe_inc = 'INCREMENTAL ' if incremental else ''
@@ -1545,7 +1545,7 @@
                 adapted_types.append(typename)
         return names, adapted_types
 
-    def write_dataframe(self, df, path, format='csv', async=False):
+    def write_dataframe(self, df, path, format='csv', _async=False):
         """
         Write a pandas DataFrame to indicated file path (default: HDFS) in the
         indicated format
@@ -1556,7 +1556,7 @@
         path : string
           Absolute output path
         format : {'csv'}, default 'csv'
-        async : boolean, default False
+        _async : boolean, default False
           Not yet supported
 
         Returns
@@ -1565,7 +1565,7 @@
         """
         from ibis.impala.pandas_interop import DataFrameWriter
 
-        if async:
+        if _async:
             raise NotImplementedError
 
         writer = DataFrameWriter(self, df)
@@ -1618,7 +1618,7 @@
     def _database(self):
         return self._match_name()[0]
 
-    def compute_stats(self, incremental=False, async=False):
+    def compute_stats(self, incremental=False, _async=False):
         """
         Invoke Impala COMPUTE STATS command to compute column, table, and
         partition statistics.
@@ -1627,7 +1627,7 @@
         """
         return self._client.compute_stats(self._qualified_name,
                                           incremental=incremental,
-                                          async=async)
+                                          _async=_async)
 
     def invalidate_metadata(self):
         self._client.invalidate_metadata(self._qualified_name)
diff -urN ibis-framework-0.13.0.orig/ibis/pandas/client.py ibis-framework-0.13.0/ibis/pandas/client.py
--- ibis-framework-0.13.0.orig/ibis/pandas/client.py	2018-06-18 13:34:02.738073095 +0000
+++ ibis-framework-0.13.0/ibis/pandas/client.py	2018-06-18 13:42:32.402715442 +0000
@@ -208,7 +208,7 @@
         schema = sch.infer(df, schema=schema)
         return PandasTable(name, schema, self).to_expr()
 
-    def execute(self, query, params=None, limit='default', async=False):
+    def execute(self, query, params=None, limit='default', _async=False):
         from ibis.pandas.execution import execute
 
         if limit != 'default':
@@ -217,7 +217,7 @@
                 'pandas backend'
             )
 
-        if async:
+        if _async:
             raise ValueError(
                 'async is not yet supported in the pandas backend'
             )
